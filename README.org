#+TITLE: Iptables firewall configuration setup
#+AUTHOR: Roger J. H. Welsh
#+EMAIL: rjhwelsh@gmail.com
#+STARTUP: inlineimages

\newpage
* About
This document aims to document and standardize firewall security modules across
my domain.


* Overview

** Iptables
Iptables processes packets through chains and tables.

*** Tables
 * filter ::
		 This default table used for general transmission *to*, *thru* and *from*
		 the local socket.
 * nat ::
		 This table is consulted when a packet creating a new connection is
		 encountered. This is for address translation.
 * mangle ::
		 This table is used for specialized packet alteration. Nat is a special type of
		 mangling.
 * raw ::
		 This table is for configuring exemptions from connection tracking in
		 combination with the =NOTRACK= target.
*** Chains
  * Prerouting ::
This chain is for rules before making a routing decision.
 * Forward ::
This is for forwarding to other (non-local) ip addresses.
 * Input ::
This is for packets to the router.
 * Output ::
This is for packets from the router.
 * Postrouting ::
 This is for packets after they have been forwarded or output from the router.
 * Adding new chains ::
New chains can be added to iptables with.
#+BEGIN_SRC sh
iptables --new-chain $NAME
#+END_SRC
These can allow you to setup a branched structure for your firewall.

*** Diagram

 (Transcribed from
 https://serverfault.com/questions/441615/iptables-snat-eats-packets,
 https://www.frozentux.net/iptables-tutorial/chunkyhtml/index.html,
 Source: Iptables Tutorial 1.2.1 Oskar Andreasson 2006)

 #+BEGIN_SRC plantuml :file uml/iptables.png :exports none
	 @startuml
	 title Iptables Fundamental

	 !include uml/skinparam.plantuml
	 (*) --> "<<raw>>\nPREROUTING" <<preroute>> <<raw>>
	 --> "<<mangle>>\nPREROUTING"  <<preroute>> <<mangle>>
	 --> "<<nat>>\nPREROUTING" <<preroute>> <<nat>>
	 If "" then
	 -right-> [forward] "<<mangle>>\nFORWARD" <<forward>> <<mangle>>
	 --> "<<filter>>\nFORWARD"  as FWD1 <<forward>> <<filter>>
	 else
	 -left-> [input] "<<mangle>>\nINPUT" <<input>> <<mangle>>
	 -left-> "<<filter>>\nINPUT"  <<input>> <<filter>>
	 -down-> "<<local>>\nPROCESS" <<local>>
	 -down-> "<<raw>>\nOUTPUT" <<output>> <<raw>>
	 -right-> "<<mangle>>\nOUTPUT" <<output>> <<mangle>>
	 -right-> "<<nat>>\nOUTPUT" <<output>> <<nat>>
	 -right-> "<<filter>>\nOUTPUT" as OUT1 <<output>> <<filter>>
	 endif
	 -right-> "<<route>>\nDecision" as POST0 <<route>>
	 FWD1 -left-> POST0
	 --> "<<mangle>>\nPOSTROUTING" <<postroute>> <<mangle>>
	 --> "<<nat>>\nPOSTROUTING" <<postroute>> <<nat>>
	 --> (*)
	 @enduml

 #+END_SRC

 #+RESULTS:
 [[file:uml/iptables.png]]

 #+NAME: Iptables Processing. fig:iptables1
 #+CAPTION: Illustrates how iptables processes internet packets at layer 2.
 #+ATTR_ORG: :width 100%
 #+ATTR_LATEX: :height 0.9\textheight
	file:uml/iptables.png

** Module Syntax

The modules contained in this repository are a collection of bash scripts for
convenient execution of firewall rules.

 * The =config.sh= script is responsible for the main execution of these
scripts. Single modules like =panic=, =lock= can be specified to configure the
firewall for the particular situation. Otherwise the script for the host will be
run.
 * =modules.d= provides base scripts for configuring specific services.
 * =hosts.d= provides specific configuration for particular hosts.

Configuration variables follow the following standard syntax.
The configuration variables can be used by the scripts to build iptables rules
quickly.

| Config Variable   | Represents                               | Examples                         |
|-------------------+------------------------------------------+----------------------------------|
| =IPTABLES=        | location of the iptables binary          | =IPTABLES=/sbin/iptables=        |
| =IPTABLES_6=      | location of the ip6tables binary         | =/sbin/ip6tables=                |
| =${VAR}_6=        | Any variable with a _6 suffix            | =LOCAL_lo_6=::1/128=             |
|                   | will use an ip6tables version.           |                                  |
|-------------------+------------------------------------------+----------------------------------|
| =IF=              | interface that is being used             | lo, tun0, wlan0, enp12s0         |
| =LOCAL_${IF}=     | ip address of the localhost on interface | =LOCAL_lo=127.0.0.1=             |
| =SUBNET_${IF}=    | ip address subnet connected to interface | =SUBNET_wlan0=192.168.1.1/24=    |
| =GATEWAY_${IF}=   | ip address of your gateway for interface | =GATEWAY_wlan0=192.168.1.1=      |
|-------------------+------------------------------------------+----------------------------------|
| =CHAIN=           | name of iptables chain                   | output,input,postrouting         |
| =TABLE=           | name of an iptables table.               | filter,nat,mangle,raw            |
| =POLICY=          | default POLICY for a new rule.           |                                  |
| =JUMP=            | default JUMP location for a new rule.    |                                  |
| =JUMP_${CHAIN}=   | default jump location for $chain         |                                  |
| =POLICY_${CHAIN}= | default policy for a chain               | ACCEPT,DROP,REJECT               |
| =POLICY_${IF}=    | default policy for an interface.         |                                  |
|-------------------+------------------------------------------+----------------------------------|
| =${CHAIN}=        | Shorthand ="iptables=                    | =${OUTPUT} --sport 22 -j ACCEPT= |
|                   | =--append ${CHAIN}"=                     |                                  |
| =I_${CHAIN}=      | Shorthand ="iptables=                    | =${I_OUTPUT} -j ACCEPT= (bypass) |
|                   | =--insert ${CHAIN}"=                     |                                  |
|-------------------+------------------------------------------+----------------------------------|
| =MASQ_IN_${IF}=   | Allows masquerading from this            |                                  |
|                   | interface when executed with mark.       |                                  |
|                   | =`iptables -A PREROUTING -t mangle=      | =${MASQ_IN_eth0} 12=             |
|                   | =-i $NATIF -j MARK --set-mark $MARK`=    |                                  |
| =MASQ_OUT_${IF}=  | Allows masquerading out of this          |                                  |
|                   | interface when executed with mark.       |                                  |
|                   | =`iptables -A POSTROUTING -o ${IF}=      | =${MASQ_OUT_wlan0} 12=           |
|                   | =-t nat -m mark -j MASQUERADE=           |                                  |
|                   | =--mark ${MARK}`=                        |                                  |
|                   | * To enable ip forwarding                |                                  |
|                   | =`echo "1" >=                            |                                  |
|                   | =/proc/sys/net/ipv4/ip_forward`=         |                                  |
|-------------------+------------------------------------------+----------------------------------|
| =PING_REQUEST=    | to allow a ping request.                 |                                  |
|                   | =`--protocol icmp=                       |                                  |
|                   | =--icmp-type echo-request`=              |                                  |
| =PING_REPLY=      | to allow a ping reply.                   |                                  |
|                   | =`--protocol icmp=                       |                                  |
|                   | =--icmp-type echo-reply`=                |                                  |
|-------------------+------------------------------------------+----------------------------------|
| =RULES=           | Array of all module rules.               |                                  |
|                   |                                          |                                  |
|-------------------+------------------------------------------+----------------------------------|


The following are a list of convenience functions.
|-------------+---------------------------------------------+
| =if_scan=   | Automatically configure interfaces.         |
| =new_if=    | Configure a new interface.                  |
| =new_chain= | Configure a new chain.                      |
|-------------+---------------------------------------------+
| =two_way=   | Configure a rule for sending and receiving. |
|             | ${OUTPUT} --sport 22                        |
|             | ${INPUT} --dport 22                         |
|-------------+---------------------------------------------+


Local variables for each module script.
| Variable    | Argument | Description                              | Example           |
|-------------+----------+------------------------------------------+-------------------|
| =IPV6=      | -4, -6   | Specify whether to use ipv4 or ipv6      | -6                |
| =RULE_TYPE= | -I X     | Specify the rule type,                   | -I 0              |
|             |          | APPEND, INSERT, DELETE, CHECK            |                   |
| =PROTOCOL=  | -P XX,   | Specify a protocol udp, tcp.             | -P tcp,udp        |
| =PORT=      | -p XX,   | Specifies the port for the module        | -p 22             |
| =SRC=       | -s XX,   | Specifies an ip address range for module | -s 192.168.1.1/24 |
| =DEST=      | -d XX,   | Destination ip address range             | -d 192.168.2.1/24 |
| =CTSTATE=   | -c XX,   | Specify a ctstate for connection         | -c ESTABLISHED    |
| =IF=        | -i XX,   | Specify an interface to operate over.    | -i wlan0          |
| =OF=        | -o XX,   | Specify an output interface.             | -o eth0           |
| =MARK=      | -m XX,   | Specify a value for MARK                 | -m 12             |
| =TARGET=    | -j XX,   | Specify the modules jump target.         | -j ACCEPT         |
| =CHAIN=     | -C XX,   | Specify the chains to use.               | -C OUTPUT         |
| =DCHAIN=    | -D XX,   | Specify output chains                    | -D POSTROUTING    |
| =TABLE=     | -t XX,   | Specify a default routing table.         | -t FILTER         |
| =LOG=       | -l       | Specifies enabling logging rules.        | -l                |
| =VERBOSE=   | -v       | Verbosely executes script.               | -v                |
|-------------+----------+------------------------------------------+-------------------|

Default functions.
| Module | Description                                                       |
|--------+-------------------------------------------------------------------|
| print  | Echos each rule to STDOUT.                                        |
| start  | Sets up the default firewall profile configuration variables.     |
| stop   | Removes *specific* iptables chains, tables and rules.             |
| flush  | Removes *all* iptables chains, tables and rules.                  |
| log    | Replaces the target of each rule in the module with "-j LOG"      |
| status | Reports back the status of each rule in the module, and stats.    |
| panic  | Locks out server completely.                                      |
|--------+-------------------------------------------------------------------|
| lock   | Locks down server, except for critical remote/local admin access. |
|        | (Specific to each host.)                                          |
|--------+-------------------------------------------------------------------|

Some examples for a module.
#+BEGIN_EXAMPLE first_module
# First module

# This is included in every module.
ENV_FILE=`dirname "$(dirname \
					 "$(readlink -e "$0" )")"`/init.d/env
source "${ENV_FILE}" "$@" || exit 1
# Empty arrays
RULES=()
RULES_TGT=()

# Accept all packets in output chain.
# ipv4 by default.
RULES[0]="OUTPUT "
RULES_TGT[0]="-j ACCEPT"

# For ipv6 simply prepend a "6"
RULES[1]="6 OUTPUT "
RULES_TGT[1]="-j ACCEPT"

# General form :
# Jump to $TARGET for every packet in $CHAIN
RULES[2]="${CHAIN} "
RULES_TGT[2]="-j ${TARGET}"
# This can be specified on the CLI or in your host file.
# ./init.d/first_module start -C OUTPUT -j ACCEPT

# Specify options in the RULES[$i] var.
# RULES_TGT is special to allow for quick replacement. (i.e. in logging).
# TARGET anything from sport 22 and lan 192.168.1.1/24
RULES[2]="${CHAIN} --sport 22 -s 192.168.1.1/24"
RULES_TGT[2]="-j ${TARGET}"

# After all the rules are defined put a '$1' at the end of the script.
# This will run the required function from 'init.d/env'
# Execute function
$1
#+END_EXAMPLE

** Artifacts

#+BEGIN_SRC plantuml :file uml/artifacts.png :exports none
		@startuml
	title Source Layout
		 folder hosts.d {
					artifact localhost
					artifact host1
					artifact host2
					}

		 folder skel.d {
					artifact host as skel.host
					artifact init as skel.init
					}
note top
Provides templates
for hosts and
scripts.
end note


		 folder init.d {
			 artifact env as init.env
		 }
note right
Sources corresponding
config file in conf.d
end note


		 folder conf.d {
			 artifact env as conf.env
		 }

		 artifact setup.sh as s
note left
Runs host script
or an alternative
script from init.d
end note
	   s --> hosts.d
     s --> init.d
     localhost --> init.env
     init.env --> conf.env
     skel.host --> host1
     skel.init --> init.env

		@enduml
#+END_SRC

#+RESULTS:
[[file:uml/artifacts.png]]

 #+NAME: The source directory fig:artifacts
 #+CAPTION: The source directory structure.
 #+ATTR_ORG: :width 100%
 #+ATTR_LATEX: :options scale=0.5
	file:uml/artifacts.png

* Base functions
Configure all the variables required for the module.
** start
Starts up all default rules for host/service.
#+BEGIN_EXAMPLE sh
./hosts.d/localhost start
#+END_EXAMPLE

** stop
Remove all rules, tables and chains from iptables.
#+BEGIN_EXAMPLE sh
./hosts.d/localhost stop
#+END_EXAMPLE

** reload
Runs =stop=, and then immediately runs =start=.
#+BEGIN_EXAMPLE sh
./hosts.d/localhost reload
#+END_EXAMPLE

** log
Adds logging rules instead of default rules.
If rules are already loaded, logging rules will appear ahead of any other rules.
#+BEGIN_EXAMPLE sh
./hosts.d/localhost log ${@}
#+END_EXAMPLE

** panic
Panic. ALL INTERFACES ARE LOCKED.
#+BEGIN_EXAMPLE sh
./hosts.d/localhost panic
#+END_EXAMPLE
Even the administrative interfaces.
Only non-network logins are permitted.
Default POLICY is set to deny.
 #+BEGIN_SRC plantuml :file uml/panic.png :exports none
@startuml
			title Panic Module
			hide footbox
			!include uml/skinparam.plantuml
			participant localhost as local
			[-[#red]>x local :<<input>>\n
			local x<[#blue]-] :<<output>>
			[-[#orange]>o local :<<forward>>
			local x<[#orange]-] :<<forward>>
@enduml

 #+END_SRC

 #+RESULTS:
 [[file:uml/panic.png]]

 #+NAME: The panic module fig:panic
 #+CAPTION: The panic module
 #+ATTR_ORG: :width 100%
 #+ATTR_LATEX: :options scale=0.5
	file:uml/panic.png
** lock
Only special access through remote and local administrative channels are
allowed. All normal (non-essential) services are cut.

#+BEGIN_EXAMPLE sh
./hosts.d/localhost lock
#+END_EXAMPLE

 #+BEGIN_SRC plantuml :file uml/lock.png :exports none
	 @startuml
				 title Lock Module
				 hide footbox
				 !include uml/skinparam.plantuml
				 participant localhost as local
				 participant admin as admin
				 participant vpnclient as vpn

         vpn -[#red]>> local : openvpn
         local -[#blue]>> vpn : openvpn

				 admin -[#red]> local :ssh -p 22
				 local -[#blue]> admin :ssh -p 22


				 [-[#red]>x local :<<input>>
				 local x<[#blue]-] :<<output>>
				 [-[#orange]>o local :<<forward>>
				 local x<[#orange]-] :<<forward>>
	 @enduml
 #+END_SRC

 #+RESULTS:
 [[file:uml/lock.png]]

 #+NAME: The lock module fig:lock
 #+CAPTION: The lock module
 #+ATTR_ORG: :width 100%
 #+ATTR_LATEX: :options scale=0.4
	file:uml/lock.png
** Additional notes
All of these services are configurable bash functions in the host directory.


* Services
** local
Accept all packets from local ip addresses.
 #+BEGIN_SRC plantuml :file uml/local.png :exports none
	 @startuml
				 title Local Module
				 hide footbox
				 !include uml/skinparam.plantuml
				 participant localnet as subnet
				 participant localhost as local

				 subnet -[#red]> local :
				 local -[#blue]> subnet :
				 subnet -[#orange]>o local :
	 @enduml
 #+END_SRC

 #+RESULTS:
 [[file:uml/local.png]]

 #+NAME: The local module fig:lock
 #+CAPTION: The local module
 #+ATTR_ORG: :width 100%
 #+ATTR_LATEX: :options scale=0.4
	file:uml/local.png
